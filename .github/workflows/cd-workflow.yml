name: CD GitHub workflow

on: workflow_dispatch
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]
  #   types: [opened, synchronize, reopened]

jobs:
  registerpackage:
    name: Register Package
    runs-on: ubuntu-latest
    steps:
      - name: Clone metada repo
        run: |
             git clone https://.:${{ secrets.BUILD_REPO_PERSONAL_ACCESS_TOKEN }}@github.com/ArunKumarReddy407/buildmetadata target
             cd target
             a=1
             for i in `grep -iR "7.0.0" release/* | grep -v semantic | cut -d ":" -f1`
             do
               echo $i
               art1=$(cat $i | grep -i artifact | cut -d ":" -f2)
               echo $art1
               echo "artifact$a=$(echo $art1)"  >> "$GITHUB_ENV"
               
               ver1=$(cat $i | grep version | cut -d ":" -f2 | tr -d " ")
               echo "version$a=$(echo $ver1)" >> "$GITHUB_ENV"
             
               semantic1=$(cat $i | grep -i semanticVersion | cut -d ":" -f2 | tr -d " ")
               echo "semanticVersion$a=$(echo $semantic1)" >> "$GITHUB_ENV"
             
               cirepo1=$(cat $i | grep -i arun | cut -d ":" -f2)
               echo "repo$a=$(echo $cirepo1)" >> "$GITHUB_ENV"

               a=$((a + 1))
             done

             #art2=$(cat release/app2/app2-comp2-release-7.0.0 | grep -i artifact | cut -d ":" -f2)
             #echo $art2
             #echo "artifact2=$(echo $art2)"  >> "$GITHUB_ENV"

             #ver2=$(cat release/app2/app2-comp2-release-7.0.0 | grep version | cut -d ":" -f2 | tr -d " ")
             #echo "version2=$(echo $ver2)" >> "$GITHUB_ENV"
             
             #semantic2=$(cat release/app2/app2-comp2-release-7.0.0 | grep -i semanticVersion | cut -d ":" -f2 | tr -d " ")
             #echo "semanticVersion2=$(echo $semantic2)" >> "$GITHUB_ENV"
             
             #cirepo2=$(cat release/app2/app2-comp2-release-7.0.0 | grep -i arun | cut -d ":" -f2)
             #echo "repo2=$(echo $cirepo2)" >> "$GITHUB_ENV" 

         
                
      - name: ServiceNow Register Package 
        uses: ServiceNow/servicenow-devops-register-package@v2.0.0
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Register Package'
          artifacts: 
                    '[{"name": "${{ env.artifact1 }}","version": "${{ env.version1}}","semanticVersion": "${{ env.semanticVersion1}}","repositoryName": "${{ env.repo1}}"},{"name": "${{ env.artifact2 }}","version": "${{ env.version2}}","semanticVersion":  "${{ env.semanticVersion2}}","repositoryName": "${{ env.repo2}}"},{"name": "${{ env.artifact3 }}","version": "${{ env.version3 }}","semanticVersion":  "${{ env.semanticVersion3 }}","repositoryName": "${{ env.repo3}}"} ]'
          package-name: 'saran-test-app-devops-chg-velo-${{env.version1},}.war'

        

  

  changereq:
    name: ChangeRequest
    needs: registerpackage
    runs-on: ubuntu-latest
    steps:     
      - name: ServiceNow Change
        uses: ServiceNow/servicenow-devops-change@v3.0.0
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'ChangeRequest'
          change-request: '{"setCloseCode":"true","autoCloseChange":true,"attributes":{"short_description":"DevOps Change Request Testing","description":"Automated Software Deployment.","assignment_group":"a715cd759f2002002920bde8132e7018","implementation_plan":"Software update is tested and results can be found in Test Summaries Tab; When the change is approved the implementation happens automated by the CICD pipeline within the change planned start and end time window.","backout_plan":"When software fails in production, the previous software release will be re-deployed.","test_plan":"Testing if the software was successfully deployed"}}'
          interval: '100'
          timeout: '3600'
          changeCreationTimeOut: '3600'
          abortOnChangeCreationFailure: true
          abortOnChangeStepTimeout: true
          # deployment-gate: '{"environment":"deploymentgate","jobName":"ChangeRequest"}'



  deploy:
    name: 'Deploy'
    needs: changereq
    runs-on: ubuntu-latest
    steps:
    - name: Run deployment scripts
      run: echo 'Deployment step in progress...'

